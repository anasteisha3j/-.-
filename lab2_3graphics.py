# -*- coding: utf-8 -*-
"""lab2-3graphics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEsD0VBMEH-V7mJQQMKWOnVpMLhwXdaI
"""

# брезенхема
import math
from PIL import Image, ImageDraw

width = 32
height = 32

center_x = width // 2
center_y = height // 2

radius = 20

image = Image.new("1", (width, height), 1)
draw = ImageDraw.Draw(image)

def draw_line(x1, y1, x2, y2):
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    sx = 1 if x1 < x2 else -1
    sy = 1 if y1 < y2 else -1
    err = dx - dy

    while True:
        if 0 <= x1 < width and 0 <= y1 < height:
            draw.point((x1, y1), fill=0)
        if x1 == x2 and y1 == y2:
            break
        e2 = err * 2
        if e2 > -dy:
            err -= dy
            x1 += sx
        if e2 < dx:
            err += dx
            y1 += sy

num_segments = 16
for i in range(num_segments):
    angle = 2 * math.pi * i / num_segments
    x_end = int(center_x + radius * math.cos(angle))
    y_end = int(center_y + radius * math.sin(angle))

    draw_line(center_x, center_y, x_end, y_end)

image.show()
image.save("circle.png")

#цда
import math
from PIL import Image, ImageDraw

width = 32
height = 32

center_x = width // 2
center_y = height // 2

radius = 20

image = Image.new("1", (width, height), 1)
draw = ImageDraw.Draw(image)

def draw_line(x1, y1, x2, y2):
    dx = x2 - x1
    dy = y2 - y1

    steps = max(abs(dx), abs(dy))

    x_inc = dx / steps
    y_inc = dy / steps

    x = x1
    y = y1

    for _ in range(steps + 1):
        if 0 <= round(x) < width and 0 <= round(y) < height:
            draw.point((round(x), round(y)), fill=0)
        x += x_inc
        y += y_inc

num_segments = 16
for i in range(num_segments):
    angle = 2 * math.pi * i / num_segments
    x_end = int(center_x + radius * math.cos(angle))
    y_end = int(center_y + radius * math.sin(angle))

    draw_line(center_x, center_y, x_end, y_end)

image.show()
image.save("circle_cda.png")

#лаб 2
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def bernstein(i, n, t):
    from math import comb
    return comb(n, i) * (t ** i) * ((1 - t) ** (n - i))

def bicubic_surface(control_points, resolution=20):
    u = np.linspace(0, 1, resolution)
    v = np.linspace(0, 1, resolution)
    surface = np.zeros((resolution, resolution, 3))

    for i in range(4):
        for j in range(4):
            b_u = bernstein(i, 3, u)[:, np.newaxis]
            b_v = bernstein(j, 3, v)[np.newaxis, :]
            surface += np.outer(b_u, b_v)[..., np.newaxis] * control_points[i, j]

    return surface

control_points = np.array([
    [[0, 0, 1], [0, 1, 2], [0, 2, 0], [0, 3, 1]],
    [[1, 0, 2], [1, 1, 3], [1, 2, 1], [1, 3, -1]],
    [[2, 0, 0], [2, 1, 1], [2, 2, 2], [2, 3, 0]],
    [[3, 0, 1], [3, 1, -1], [3, 2, 3], [3, 3, 4]]
])

# control_points = np.array([
#     [[0, 0, 0], [0, 1, 2]],
#     [[1, 0, 3], [1, 1, 2]]
# ])


surface = bicubic_surface(control_points)

fig = plt.figure(figsize=(15, 10))

ax = fig.add_subplot(221, projection='3d')
ax.plot_surface(surface[:, :, 0], surface[:, :, 1], surface[:, :, 2], alpha=0.7, cmap='viridis')
ax.scatter(control_points[:, :, 0], control_points[:, :, 1], control_points[:, :, 2], color='r', label='Контрольні точки')
ax.set_title("Бікубічна поверхня")
ax.legend()

#X
ax_x = fig.add_subplot(222)
for i in range(surface.shape[0]):
    ax_x.plot(surface[i, :, 1], surface[i, :, 2], color='blue')
for j in range(surface.shape[1]):
    ax_x.plot(surface[:, j, 1], surface[:, j, 2], color='green')
ax_x.scatter(control_points[:, :, 1], control_points[:, :, 2], color='r')
ax_x.set_title("Проекція на X=0")
ax_x.set_xlabel("Y")
ax_x.set_ylabel("Z")

#Y
ax_y = fig.add_subplot(223)
for i in range(surface.shape[0]):
    ax_y.plot(surface[i, :, 0], surface[i, :, 2], color='blue')
for j in range(surface.shape[1]):
    ax_y.plot(surface[:, j, 0], surface[:, j, 2], color='green')
ax_y.scatter(control_points[:, :, 0], control_points[:, :, 2], color='r')
ax_y.set_title("Проекція на Y=0")
ax_y.set_xlabel("X")
ax_y.set_ylabel("Z")

#Z
ax_z = fig.add_subplot(224)
for i in range(surface.shape[0]):
    ax_z.plot(surface[i, :, 0], surface[i, :, 1], color='blue')
for j in range(surface.shape[1]):
    ax_z.plot(surface[:, j, 0], surface[:, j, 1], color='green')
ax_z.scatter(control_points[:, :, 0], control_points[:, :, 1], color='r')
ax_z.set_title("Проекція на Z=0")
ax_z.set_xlabel("X")
ax_z.set_ylabel("Y")

plt.tight_layout()
plt.show()

